### setup windows
Install Windows 11 {
    Boot into Windows USB
    Press Shift+F10 to open admin console
    diskpart {
       list disk
       select disk 0
       create partition efi size=1024
       format quick fs=fat32
    }
    Continue installing as normal
}
Open control panel > Hardware and Sound > Power settings > Change what the power buttons do > Disable fast startup and hibernation
regedit
    Add DWORD=1 at HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation\RealTimeIsUniversal

### setup linux
Download <Arch iso> from https://archlinux.org/download/
On Windows {
    Download portable <Rufus exe> from https://rufus.ie/en/
    Plug in USB drive
    Launch <Rufus exe>
        Select USB drive
        Select the <Arch iso>
        Click "START" and wait for it to finish
        Click "CLOSE"
} On Linux {
    lsblk # find <USB drive>, for example: <USB drive> = "/dev/sdc"
    mkfs.vfat <USB drive> # format USB drive
    dd status=progress bs=1M if=<Arch iso> of=<USB drive> && sync # copy Arch to USB drive
}

On VM {
    Don't have too much video memory for some reason
} else {
    Go into BIOS
        Enable USB Boot
        Boot from USB Disk
}


### install
Boot into Arch iso
lsblk -o NAME,PTTYPE,PATH,SIZE,PARTTYPENAME,FSTYPE,FSVER,MOUNTPOINT # this command is your friend
On EFI system {
    ls /sys/firmware/efi # this should show an /efivars folder
    fdisk /dev/sda
        If no other OSes are installed {
            g # format drive to GPT
            # make an EFI partition, we will assume <EFI partition> = "/dev/sda1" (if you are unsure, check lsblk)
            n [Enter] [Enter] +1G
                t 1
        }

        # make a Linux partition, we will assume <Linux partition> = "/dev/sda2"
        n [Enter] [Enter] [Enter]

        # Save and exit
        w
    If no other OSes are installed {
        mkfs.fat -F 32 <EFI partition>
    }
    mkfs.ext4 <Linux partition>
} else {
    Find another tutorial
}

# mount the partitions
mount <Linux partition> /mnt
mkdir /mnt/boot
mount <EFI partition> /mnt/boot

# make a swapfile
dd status=progress bs=1M count=20480 if=/dev/zero of=/mnt/swapfile # make a 20GB file
chmod 600 /mnt/swapfile
mkswap /mnt/swapfile
swapon /mnt/swapfile

# connect to the internet
On Ethernet {
    Should be automatic
} On WiFi {
    iwctl
        device list # this fails if you didn't disable fast startup
        station wlan0 get-networks
        station wlan0 connect <network name>
            <network password>
        quit
}
ping 8.8.8.8 # should succeed
    [Ctrl+C]

# Get best mirrors (optional)
? reflector -l 5 --sort score --save /etc/pacman.d/mirrorlist
? pacman -Syyy

# install Arch
pacstrap /mnt base base-devel efibootmgr linux linux-firmware intel-ucode networkmanager network-manager-applet ca-certificates mtools dosfstools usbutils pciutils net-tools sudo man-db man-pages texinfo htop git nano xorg xorg-xinit xorg-drivers xorg-xrandr autorandr alsa-card-profiles alsa-firmware alsa-lib alsa-utils pipewire pipewire-alsa pipewire-pulse pulsemixer
# reasoning:
    # base base-devel                                                                 # most programs don't work without these (also installs systemd-boot)
    # linux                                                                                      # Linux kernel, very important
    # linux-firmware intel-ucode                                                                 # proprietary firmware
    # networkmanager network-manager-applet ca-certificates                                      # for connecting to the internet
    # mtools dosfstools                                                                          # for accessing FAT file systems
    # usbutils pciutils                                                                          # for listing USB and PCI(-E) devices: lsusb, lspci
    # net-tools                                                                                  # for listing network info: ifconfig
    # sudo                                                                                       # for executing commands as admin
    # man-db man-pages texinfo                                                                   # for viewing program manuals
    # htop                                                                                       # for displaying CPU usage
    # git                                                                                        # for downloading programs from github
    # nano                                                                                       # for editing text
    # alsa-card-profiles alsa-firmware alsa-lib alsa-utils pipewire pipewire-alsa pipewire-pulse pulsemixer # for audio to work
genfstab -L /mnt > /mnt/etc/fstab

# open the installed system
arch-chroot /mnt

# set the timezone
timedatectl set-ntp 1
timedatectl list-timezones
timedatectl set-timezone "Europe/Prague"
timedatectl set-local-rtc 0
timedatectl
# ln -sf /usr/share/zoneinfo/Europe/Prague /etc/localtime

# set the language
nano /etc/locale.gen
    Uncomment en_US.UTF-8 UTF-8
    [Ctrl+S] [Ctrl+X]
locale-gen
nano /etc/locale.conf
    Add LANG=en_US.UTF-8
    [Ctrl+S] [Ctrl+X]
nano /etc/vconsole.conf
    Add KEYMAP=cz-qwerty
    [Ctrl+S] [Ctrl+X]

# set the hostname (for NetworkManager)
nano /etc/hostname
    Write <computer name>
    [Ctrl+S] [Ctrl+X]

# enable starting NetworkManager on startup
systemctl enable NetworkManager

# overwrite EFI partition with systemd-boot
bootctl install

# create linux boot settings
nano /boot/loader/entries/arch.conf
    Write {
        title Arch linux
        linux /vmlinuz-linux
        initrd /intel-ucode.img # optional
        initrd /initramfs-linux.img
        options root=<Linux partition> rw
    }
nano /boot/loader/entries/arch-fallback.conf
    Write {
        title Arch Linux (fallback)
        linux /vmlinuz-linux
        initrd /intel-ucode.img # optional
        initrd /initramfs-linux-fallback.img
        options root=<Linux partition> rw
    }

# set bootloader settings
ls /boot/loader/entries # list all OSes
nano /boot/loader/loader.conf
    Write {
        default arch.conf
        timeout 3
    }

# set admin ("root") password
passwd
    <admin password>
    <admin password>

# reboot into Arch
shutdown now
Unplug USB
Start computer
    root
    <admin password>


### post-install

# connect to a network
nmtui
    Select "Activate a connection"
    Select <network name>
    Input <network password>
ping 8.8.8.8 # should succeed
    [Ctrl+C]

# add a new user # some programs will refuse to execute as admin
useradd -m <user name>
passwd <user name>
    <user password>
    <user password>
usermod -aG wheel,tty,uucp <user name>

# give the "wheel" user group permission to execute programs as admin
EDITOR=nano visudo
    Uncomment or add %wheel ALL=(ALL:ALL) ALL
    [Ctrl+S] [Ctrl+X]

logout
    <user name>
    <user password>

# install yay package manager for installing AUR packages easily
git clone https://aur.archlinux.org/yay.git
    cd yay
    makepkg -sic
    cd ..
    rm -rf yay

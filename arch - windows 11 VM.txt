# isolate CPU cores
Under BIOS {
    On Intel CPU {
        Enable Intel VT-x
        Enable Intel VT-d
    }
    On AMD CPU {
        Enable AMD-V or SVM
        Enable AMD-Vi or IOMMU
    }
    ? Set primary GPU = iGPU
}

cat /sys/devices/system/cpu/cpu*/topology/thread_siblings_list | sort | uniq # get CPU topology
## example output
0,8
1,9
2,10
3,11
4,12
5,13
6,14
7,15
##

On Intel {
    Add kernel options "intel_iommu=on iommu=pt isolcpus=2,10,3,11,4,12,5,13,6,14,7,15"
}
On AMD {
    Add kernel options "amd_iommu=on iommu=pt isolcpus=2,10,3,11,4,12,5,13,6,14,7,15"
}
Restart
cat /sys/devices/system/cpu/isolated # check if we isolated CPUs
## example output
2-7,10-15
##

# find <gpu ids>
lspci -nn # for example: <gpu ids>=10de:1f03,10de:10f9

## example output
01:00.0 VGA compatible controller [0300]: NVIDIA Corporation TU106 [GeForce RTX 2060 12GB] [10de:1f03] (rev a1)
01:00.1 Audio device [0403]: NVIDIA Corporation TU106 High Definition Audio Controller [10de:10f9] (rev a1)
##

# isolate GPU
Follow latest modprobe.d guide at https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#Isolating_the_GPU

# check if cpu isolation worked
Restart
sudo dmesg | grep -E "DMAR|IOMMU" # check that iommu is enabled
## example output
[    0.000000] DMAR: IOMMU enabled
## or
[    0.385044] AMD-Vi: AMD IOMMUv2 loaded and initialized
##

# check tha gpu isolation worked
sudo dmesg | grep -i vfio
## example output
[    5.006414] vfio_pci: add [10de:1f03[ffffffff:ffffffff]] class 0x000000/00000000
[    5.006418] vfio_pci: add [10de:10f9[ffffffff:ffffffff]] class 0x000000/00000000
##

# alternate check that gpu isolation worked
lspci -nnk -d <gpu id>
## example bad output
01:00.0 VGA compatible controller [0300]: NVIDIA Corporation TU106 [GeForce RTX 2060 12GB] [10de:1f03] (rev a1)
	Subsystem: Micro-Star International Co., Ltd. [MSI] Device [1462:c757]
	Kernel modules: nouveau, nvidia_drm, nvidia
## example good output
01:00.0 VGA compatible controller [0300]: NVIDIA Corporation TU106 [GeForce RTX 2060 12GB] [10de:1f03] (rev a1)
	Subsystem: Micro-Star International Co., Ltd. [MSI] Device [1462:c757]
	Kernel driver in use: vfio-pci
	Kernel modules: nouveau, nvidia_drm, nvidia
##

# install virt-manager
sudo pacman -S iptables-nft dnsmasq libvirt qemu-desktop virt-manager swtpm # ovmf {
    Say yes to removing iptables
}
sudo systemctl enable libvirtd.service
sudo systemctl enable virtlogd.socket
sudo usermod -aG libvirt <username>
Restart
groups # should now include libvirt
sudo virsh net-autostart default
sudo virsh net-start default
Restart # just in case

Download Windows 11 ISO from https://www.microsoft.com/en-us/software-download/windows11 # broken on firefox for some reason
Download virtio-win.iso from https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso

# create the VM
virt-manager {
    Click "Create a new virtual machine"
    Select Windows 11 ISO
    Leave memory and CPU as default
    Set disk size to whatever
    Check "Customize configuration before install"
    Under Overview {
        Set chiset to Q35
        Set firmware to UEFI secboot.fd
    }
    Under Memory {
        Set current allocation to whatever
        Under XML {
            Replace "<domain type='kvm'>" with "<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>"
            Replace "<vcpu>2</vcpu>" with {
                <vcpu placement="static">12</vcpu>
                <cputune>
                  <vcpupin vcpu="0" cpuset="2"/>
                  <vcpupin vcpu="1" cpuset="10"/>
                  <vcpupin vcpu="2" cpuset="3"/>
                  <vcpupin vcpu="3" cpuset="11"/>
                  <vcpupin vcpu="4" cpuset="4"/>
                  <vcpupin vcpu="5" cpuset="12"/>
                  <vcpupin vcpu="6" cpuset="5"/>
                  <vcpupin vcpu="7" cpuset="13"/>
                  <vcpupin vcpu="8" cpuset="6"/>
                  <vcpupin vcpu="9" cpuset="14"/>
                  <vcpupin vcpu="10" cpuset="7"/>
                  <vcpupin vcpu="11" cpuset="15"/>
                </cputune>
            } # my motherboard doesn't support SVM with hyperthreading, so pretend every other line doesn't exist
            Under "<hyperv>" add "<vendor_id state='on' value='1234567890ab'/>"
            Under "<features>" add {
                <kvm>
                    <hidden state='on'/>
                </kvm>
                <ioapic driver='kvm'/>
            }
            Replace "<cpu mode='host-model'/>" with {
                <cpu mode="host-passthrough" check="none">
                    <topology sockets="1" dies="1" cores="6" threads="2"/> # again, pretend threads="1"
		    #<cache mode="passthrough" />
		    <feature policy="disable" name="hypervisor" />
                </cpu>
            }
            Under "<domain>" add {
                <qemu:commandline>
                    <qemu:arg value='-cpu'/>
                    <qemu:arg value='host,-hypervisor,kvm=off,hv_vendor_id=null'/>
                    <qemu:arg value='-machine'/>
                    <qemu:arg value='q35,kernel_irqchip=on'/>
                </qemu:commandline>
            }
            Click apply
        }
        Add hardware > Storage {
            Set Device type to CDROM device
            Select virtio-win.iso
            Click Finish
        }
        Remove tablet
        Add hardware > PCI Host Device {
            Add all <gpu parts>
        }
        Add hardware > TPM
    }
    Click begin installation # if it gets stuck, try installing without the CPU/GPU settings first and add them later after you install Windows 11
    Press any key to boot from CD
    Install Windows 11
    # GPU driver probably installs automatically, if not download the driver manually
    Install virtio-win-gt-x64.msi from virtio CD, don't install guest tools otherwise the VM will stop capturing the mouse
}
